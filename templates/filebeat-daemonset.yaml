apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat-auto
  labels:
    name: filebeat-auto
spec:
  # replicas: 1
  selector:
    matchLabels:
      name: filebeat-auto
  template:
    metadata:
      labels:
        name: filebeat-auto
    spec:
      containers:
      - name: beat-auto
        image: elastic/filebeat:7.8.0
        env:
        - name: LOGSTASH_HOSTS
          value: {{ .Values.global.hostIp }}:{{ .Values.ports.logstash }}
        args: [
          "-c", "/etc/filebeat/filebeat.yml",
          "-e"
        ]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: log-output
          mountPath: /tmp/
        - name: beat-config
          mountPath: /etc/filebeat/
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: log-output
        emptyDir: {}
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
      - name: beat-config
        configMap:
          name: beat-config
          items:
          - key: filebeat.yml
            path: filebeat.yml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: beat-config
data:
  filebeat.yml: |
{{ .Files.Get "filebeat.yml" | indent 4 }}
---
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
  - kind: ServiceAccount
    # Reference to upper's `metadata.name`
    name: default
    # Reference to upper's `metadata.namespace`
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io